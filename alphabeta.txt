import math

def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth, alpha, beta):
    # Base case: target depth reached
    if curDepth == targetDepth:
        print("Reached target depth at depth:", curDepth, "Node index:", nodeIndex, "Value:", scores[nodeIndex])
        return scores[nodeIndex]

    if maxTurn:
        print("Maximizing turn at depth:", curDepth, "Node index:", nodeIndex, "Alpha:", alpha, "Beta:", beta)
        best = -math.inf
        for i in range(2):
            val = minimax(curDepth + 1, nodeIndex * 2 + i, False, scores, targetDepth, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                print("Pruning at depth:", curDepth, "Node index:", nodeIndex)
                break
        return best
    else:
        print("Minimizing turn at depth:", curDepth, "Node index:", nodeIndex, "Alpha:", alpha, "Beta:", beta)
        best = math.inf
        for i in range(2):
            val = minimax(curDepth + 1, nodeIndex * 2 + i, True, scores, targetDepth, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                print("Pruning at depth:", curDepth, "Node index:", nodeIndex)
                break
        return best

scores = [3, 5, 2, 9, 12, 5, 23, 23]
treeDepth = int(math.log2(len(scores)))

optimal_value = minimax(0, 0, True, scores, treeDepth, -math.inf, math.inf)
print("\nThe optimal value is:", optimal_value)
