# Graph-Based Clustering using NetworkX and Spectral Clustering
# -------------------------------------------------------------
# We'll create a similarity graph using NetworkX from our dataset,
# then apply Spectral Clustering from sklearn, visualize both the graph and clustering results.

import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
from sklearn.datasets import make_moons
from sklearn.cluster import SpectralClustering
from sklearn.metrics import silhouette_score
from sklearn.neighbors import kneighbors_graph

# ------------------------------------------------------------
# 1Ô∏è‚É£ Create a Non-linear Dataset (Two Moons)
# ------------------------------------------------------------
X, y_true = make_moons(n_samples=300, noise=0.08, random_state=42)

# ------------------------------------------------------------
# 2Ô∏è‚É£ Build Graph (using k-nearest neighbors)
# ------------------------------------------------------------
# The k-nearest neighbor graph connects each point to its nearest neighbors
k = 10  # number of neighbors
A = kneighbors_graph(X, n_neighbors=k, include_self=False).toarray()

# Convert adjacency matrix to a NetworkX graph
G = nx.from_numpy_array(A)

# ------------------------------------------------------------
# 3Ô∏è‚É£ Visualize the Graph Structure
# ------------------------------------------------------------
plt.figure(figsize=(7, 5))
pos = {i: (X[i, 0], X[i, 1]) for i in range(len(X))}
nx.draw(G, pos, node_size=40, node_color='skyblue', edge_color='gray')
plt.title("Graph Representation of Data (k-NN Graph)")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()

# ------------------------------------------------------------
# 4Ô∏è‚É£ Spectral Clustering on Graph
# ------------------------------------------------------------
spectral = SpectralClustering(
    n_clusters=2,
    affinity='precomputed',  # use our graph as input
    assign_labels='kmeans',
    random_state=42
)

y_pred = spectral.fit_predict(A)

# ------------------------------------------------------------
# 5Ô∏è‚É£ Evaluate Clustering Performance
# ------------------------------------------------------------
sil_score = silhouette_score(X, y_pred)
print(f"Silhouette Score: {sil_score:.3f}")

# ------------------------------------------------------------
# 6Ô∏è‚É£ Visualize Clustered Data
# ------------------------------------------------------------
plt.figure(figsize=(7, 5))
plt.scatter(X[:, 0], X[:, 1], c=y_pred, cmap='viridis', s=50)
plt.title("Spectral (Graph-Based) Clustering Result")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()

# ------------------------------------------------------------
# üß† Commented Section: Dummy Dataset Generator
# ------------------------------------------------------------
# from sklearn.datasets import make_moons
# def generate_dummy_graph_data(n_samples=300, noise=0.08):
#     """
#     Generates a non-linear (moon-shaped) dataset for graph-based clustering.
#     Returns: features (X), true_labels (y)
#     """
#     X, y = make_moons(n_samples=n_samples, noise=noise, random_state=42)
#     return X, y
#
# X, y_true = generate_dummy_graph_data()

# ------------------------------------------------------------
# üîë Important Keywords:
# ------------------------------------------------------------
# Graph-Based Clustering - uses graph structures to detect non-linear cluster shapes.
# NetworkX - Python library for graph creation, analysis, and visualization.
# k-NN Graph - connects each point with its k nearest neighbors to form an adjacency matrix.
# Spectral Clustering - uses graph Laplacian eigenvectors to separate clusters.
# Silhouette Score - metric to evaluate cluster cohesion and separation.
# Affinity Matrix - similarity representation of the data.

"""
Graph-Based Clustering is a machine learning technique 
that uses graph structures to identify patterns and group 
similar data points together. It works by creating a graph 
where each data point is a node, and edges represent the 
similarity between points. The graph is then analyzed using 
graph algorithms to find clusters. This method is particularly 
useful for non-linear data patterns that traditional clustering 
algorithms (like K-Means) cannot capture. NetworkX is a popular 
Python library for graph creation and analysis, and Spectral 
Clustering is a graph-based clustering algorithm that uses the 
Laplacian eigenvectors to identify clusters.
"""