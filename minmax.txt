import math

def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth):
    # Base case: targetDepth reached
    if curDepth == targetDepth:
        print("Reached target depth at depth:", curDepth)
        return scores[nodeIndex]

    if maxTurn:
        print("Maximizing turn at depth:", curDepth, "Node index:", nodeIndex)
        return max(
            minimax(curDepth + 1, nodeIndex * 2, False, scores, targetDepth),
            minimax(curDepth + 1, nodeIndex * 2 + 1, False, scores, targetDepth)
        )
    else:
        print("Minimizing turn at depth:", curDepth, "Node index:", nodeIndex)
        return min(
            minimax(curDepth + 1, nodeIndex * 2, True, scores, targetDepth),
            minimax(curDepth + 1, nodeIndex * 2 + 1, True, scores, targetDepth)
        )

scores = [3, 5, 2, 9, 12, 5, 23, 23]
treeDepth = int(math.log2(len(scores)))

optimal_value = minimax(0, 0, True, scores, treeDepth)
print("\nThe optimal value is:", optimal_value)
