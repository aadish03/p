import heapq

class Node:
    def __init__(self, x, y):  # Corrected constructor name
        self.x = x
        self.y = y
        self.g = float('inf')   # Cost from start to node
        self.f = float('inf')   # Total estimated cost (g + h)
        self.parent = None

    def __lt__(self, other):  # Corrected magic method
        return self.f < other.f

    def __eq__(self, other):  # Corrected magic method
        return (self.x == other.x and self.y == other.y)

    def __hash__(self):  # Corrected magic method
        return hash((self.x, self.y))

def heuristic(a, b):
    return abs(a.x - b.x) + abs(a.y - b.y)  # Manhattan distance

def a_star(start, goal, neighbors):
    open_set = []
    closed_set = set()
    start.g = 0
    start.f = heuristic(start, goal)

    heapq.heappush(open_set, start)

    while open_set:
        current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current:
                path.append(current)
                current = current.parent
            return path[::-1]

        closed_set.add(current)

        for neighbor in neighbors(current):
            if neighbor in closed_set:
                continue

            tentative_g = current.g + 1
            if tentative_g < neighbor.g:
                neighbor.g = tentative_g
                neighbor.f = neighbor.g + heuristic(neighbor, goal)
                neighbor.parent = current

                if neighbor not in open_set:
                    heapq.heappush(open_set, neighbor)

    return None

start_node = Node(0, 0)
goal_node = Node(5, 5)

def get_neighbors(node):
    neighbors = []
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for dx, dy in directions:
        nx, ny = node.x + dx, node.y + dy
        if 0 <= nx < 6 and 0 <= ny < 6:
            neighbors.append(Node(nx, ny))
    return neighbors

path = a_star(start_node, goal_node, get_neighbors)
if path:
    print("Path found:")
    for p in path:
        print(f'({p.x}, {p.y})')
else:
    print("No path found")
