#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#define MAX_TOKEN_LENGTH 100
typedef enum
{
KEYWORD,
IDENTIFIER,
NUMBER,
SYMBOL,
OPERATOR,
WHITESPACE,
UNKNOWN
} TokenType;
const char *keywords[] = {"if", "else", "while", "for", "return", "int", "float", "char"};
int num_keywords = sizeof(keywords) / sizeof(keywords[0]);
int isKeyword(const char *str);
void tokenize(const char *code);
int main()
{
FILE *file;
char code[1000];
file = fopen("input.c", "r");
if (file == NULL)
{
printf("Error: Could not open file.\n");
return 1;
}
size_t n = fread(code, 1, sizeof(code) - 1, file);
code[n] = '\0';
fclose(file);
printf("Performing lexical analysis...\n");
tokenize(code);
return 0;
}
{
int isKeyword(const char *str)
for (int i = 0; i < num_keywords; i++)
{
if (strcmp(str, keywords[i]) == 0)
{
return 1;
}
}
return 0;
}
{
void tokenize(const char *code)
int i = 0, j = 0;
char token[MAX_TOKEN_LENGTH];
printf("\nTokens identified:\n");
while (code[i] != '\0')
{
if (isspace(code[i]))
{
i++;
continue;
}
else if (isalpha(code[i]) || code[i] == '_')
{
j = 0;
{
while (isalnum(code[i]) || code[i] == '_')
token[j++] = code[i++];
}
token[j] = '\0';
if (isKeyword(token))
{
printf("KEYWORD: %s\n", token);
}
else
{
printf("IDENTIFIER: %s\n", token);
}
}
else if (isdigit(code[i]))
{
j = 0;
{
while (isdigit(code[i]) || code[i] == '.')
token[j++] = code[i++];
}
token[j] = '\0';
printf("NUMBER: %s\n", token);
}
else if (strchr("{}()[];,", code[i]))
{
printf("SYMBOL: %c\n", code[i]);
i++;
}
else if (strchr("+-*/=<>!", code[i]))
{
printf("OPERATOR: %c\n", code[i]);
i++;
}
else
{
printf("UNKNOWN: %c\n", code[i]);
i++;
}
}
}