# DBSCAN Clustering using make_blobs Dataset and StandardScaler
# -------------------------------------------------------------
# This example demonstrates density-based clustering with DBSCAN.
# We'll generate data using make_blobs, scale it, apply DBSCAN,
# visualize clusters, and explain the theory at the end.

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score

# ------------------------------------------------------------
# 1Ô∏è‚É£ Generate Synthetic Dataset using make_blobs
# ------------------------------------------------------------
X, y_true = make_blobs(
    n_samples=300,
    centers=[[2, 2], [-2, -1], [2, -3]],
    cluster_std=0.8,
    random_state=42
)

# ------------------------------------------------------------
# 2Ô∏è‚É£ Standardize Features
# ------------------------------------------------------------
# Scaling ensures all features contribute equally to the distance metric.
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ------------------------------------------------------------
# 3Ô∏è‚É£ Apply DBSCAN Algorithm
# ------------------------------------------------------------
# eps - neighborhood radius
# min_samples - minimum points required to form a dense region
dbscan = DBSCAN(eps=0.5, min_samples=5)
y_pred = dbscan.fit_predict(X_scaled)

# ------------------------------------------------------------
# 4Ô∏è‚É£ Evaluate Clustering (ignore noise points)
# ------------------------------------------------------------
if len(set(y_pred)) > 1 and (len(set(y_pred)) - (1 if -1 in y_pred else 0)) > 1:
    sil_score = silhouette_score(X_scaled[y_pred != -1], y_pred[y_pred != -1])
else:
    sil_score = "N/A (insufficient clusters)"

print(f"Number of clusters found (excluding noise): {len(set(y_pred)) - (1 if -1 in y_pred else 0)}")
print(f"Silhouette Score: {sil_score}")

# ------------------------------------------------------------
# 5Ô∏è‚É£ Visualize Clustering Results
# ------------------------------------------------------------
plt.figure(figsize=(7, 5))
unique_labels = set(y_pred)
colors = [plt.cm.tab10(each) for each in np.linspace(0, 1, len(unique_labels))]

for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise points
        col = [0, 0, 0, 1]
    class_member_mask = (y_pred == k)
    xy = X_scaled[class_member_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
             markeredgecolor='k', markersize=7)

plt.title("DBSCAN Clustering (Density-Based)")
plt.xlabel("Feature 1 (Scaled)")
plt.ylabel("Feature 2 (Scaled)")
plt.show()

# ------------------------------------------------------------
# üß† Commented Section: Dummy Dataset Generator
# ------------------------------------------------------------
# from sklearn.datasets import make_blobs
# from sklearn.preprocessing import StandardScaler
# def generate_dummy_blobs_data(n_samples=300):
#     """
#     Generates a blob-based dataset and scales it for clustering.
#     Returns: scaled_features (X_scaled), true_labels (y)
#     """
#     X, y = make_blobs(
#         n_samples=n_samples,
#         centers=[[2, 2], [-2, -1], [2, -3]],
#         cluster_std=0.8,
#         random_state=42
#     )
#     X_scaled = StandardScaler().fit_transform(X)
#     return X_scaled, y
# 
# X_scaled, y_true = generate_dummy_blobs_data()

# ------------------------------------------------------------
# üìò THEORY PARAGRAPH
# ------------------------------------------------------------
# DBSCAN (Density-Based Spatial Clustering of Applications with Noise)
# is an unsupervised clustering algorithm that identifies dense regions
# of data points as clusters and labels isolated points as noise.
# It does not require specifying the number of clusters beforehand.
# The two key parameters are:
#  - eps: defines the maximum radius of the neighborhood.
#  - min_samples: defines the minimum number of points required to form a dense region.
# Unlike K-Means, DBSCAN can find clusters of arbitrary shape and is robust to outliers.
# Using StandardScaler ensures that all features contribute equally to the distance metric,
# which is crucial for accurate density-based clustering.
