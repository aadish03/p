#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#define MAX_TOKEN_LENGTH 100
#define MAX_CODE_LENGTH 1000

typedef enum {
    KEYWORD,
    IDENTIFIER,
    NUMBER,
    SYMBOL,
    OPERATOR,
    WHITESPACE,
    UNKNOWN
} TokenType;

const char *keywords[] = {"if", "else", "while", "for", "return", "int", "float", "char"};
int num_keywords = sizeof(keywords) / sizeof(keywords[0]);

int isKeyword(const char *str) {
    for (int i = 0; i < num_keywords; i++) {
        if (strcmp(str, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

void tokenize(const char *code) {
    int i = 0, j = 0;
    char token[MAX_TOKEN_LENGTH];
    printf("\nTokens identified:\n");

    while (code[i] != '\0') {
        if (isspace(code[i])) {
            i++;
            continue;
        }

        // Identifiers or Keywords
        if (isalpha(code[i]) || code[i] == '_') {
            j = 0;
            while (isalnum(code[i]) || code[i] == '_') {
                token[j++] = code[i++];
            }
            token[j] = '\0';

            if (isKeyword(token)) {
                printf("KEYWORD: %s\n", token);
            } else {
                printf("IDENTIFIER: %s\n", token);
            }
        }

        // Numbers
        else if (isdigit(code[i])) {
            j = 0;
            while (isdigit(code[i]) || code[i] == '.') {
                token[j++] = code[i++];
            }
            token[j] = '\0';
            printf("NUMBER: %s\n", token);
        }

        // Symbols
        else if (strchr("{}()[];,", code[i])) {
            printf("SYMBOL: %c\n", code[i]);
            i++;
        }

        // Operators
        else if (strchr("+-*/=<>!", code[i])) {
            printf("OPERATOR: %c\n", code[i]);
            i++;
        }

        // Unknown characters
        else {
            printf("UNKNOWN: %c\n", code[i]);
            i++;
        }
    }
}

int main() {
    char code[MAX_CODE_LENGTH];

    printf("Enter C code (end with a blank line):\n");

    code[0] = '\0';  // Empty the code buffer

    char line[256];
    while (fgets(line, sizeof(line), stdin)) {
        if (strcmp(line, "\n") == 0) {
            break;  // blank line ends input
        }
        strcat(code, line);
    }

    printf("Performing lexical analysis...\n");
    tokenize(code);

    return 0;
}
/*input
int main() {
    int x = 10;
    float y = 20.5;
    if (x < y) return x;
}
*/